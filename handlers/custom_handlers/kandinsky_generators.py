from aiogram.types import BufferedInputFile
from aiogram.types import Message
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from io import BytesIO
from PIL import Image
import base64

from api.kandinsky_generators import Text2ImageAPI
from states import main_states as st
import config_data.config as config
from utils.actions_decorators import typing_action, upload_photo_action

router = Router()


@router.message(F.text == "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å \n–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üñº")
@typing_action(delay=1)
async def cmd_generate_image(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–æ–¥.
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    await state.set_state(st.MainStates.generating_image_state)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å')


@router.message(st.MainStates.generating_image_state)
@typing_action(delay=1)
async def send_photo(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    await state.set_state(st.MainStates.processing_state)
    api = Text2ImageAPI(url=config.FUSIONBRAIN_URL,
                        api_key=config.FUSIONBRAIN_API_KEY,
                        secret_key=config.FUSIONBRAIN_SECRET_KEY)

    model_id: int = await api.get_model()
    await message.answer(config.WAIT_MESSAGE_AFTER_COMMAND + config.WAIT_MESSAGE_AFTER_COMMAND_IMG)
    uuid: str = await api.generate(message.text, model_id)
    
    # –±—ã–≤–∞–µ—Ç, —á—Ç–æ Kandinsky API –Ω–µ –æ—Ç–¥–∞–µ—Ç –¥–∞–∂–µ uuid, –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–∏–º —ç—Ç–æ—Ç —Å–ª—É—á–∞–∏ÃÜ
    if uuid is None:
        await message.answer(
            """
            –û—à–∏–±–∫–∞: –°–µ—Ä–≤–µ—Ä –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å (–≤–æ–∑–º–æ–∂–Ω–æ, –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–π –Ω–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏).
            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
            """
        )
        await state.clear()
        return
    
    # # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ –¥–∞–Ω–Ω—ã—Ö Base64
    images_base64_string: list[str] = await api.check_generation(uuid)
    
    if images_base64_string is None:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()
        return
    
    # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Base64
    images_base64_data: bytes = base64.b64decode(images_base64_string[0])
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ BytesIO
    image_stream: BytesIO = BytesIO(images_base64_data)
    
    # –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é PIL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    image: Image.Image = Image.open(image_stream)
    image.show()  # –û—Ç–æ–±—Ä–∞–∑–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ (–≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    
    # –ü–µ—Ä–µ–º–æ—Ç–∞—Ç—å BytesIO –æ–±—ä–µ–∫—Ç –Ω–∞ –Ω–∞—á–∞–ª–æ
    image_stream.seek(0)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ BufferedInputFile
    input_file: BufferedInputFile = BufferedInputFile(image_stream.read(), filename="generated_image.png")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —á–∞—Ç
    print(f"\n–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {message.text}\n")  # for debugging
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
    @upload_photo_action(delay=3)
    async def send_image(mess: Message, photo: BufferedInputFile) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        Args:
            mess (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            photo (BufferedInputFile): –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
        """
        await mess.answer_photo(photo=photo)
    
    await send_image(message, input_file)

    await state.clear()
